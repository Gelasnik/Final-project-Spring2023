{
    "GNN_DATA": {
        "edges": [
            {
                "dst": "loopSeerDum",
                "src": "4232102_root"
            }
        ],
        "nodes": [
            {
                "block_addr": 4232102,
                "constraints": [
                    [
                        0,
                        []
                    ]
                ],
                "instructions": "push|rbp|    |mov|rbp|rsp|    |mov|eax|edi|    |mov|byte|ptr|rbp|-|4|al|    |movzx|eax|byte|ptr|rbp|-|4|    |shr|al|5|    |movzx|eax|al|    |cdqe|    |mov|edx|dword|ptr|rax*4|+|0x40ac60|    |movzx|eax|byte|ptr|rbp|-|4|    |movzx|eax|al|    |and|eax|0x1f|    |mov|ecx|eax|    |shr|edx|cl|    |mov|eax|edx|    |and|eax|1|    |test|eax|eax|    |setne|al|    |pop|rbp|    |ret|    ",
                "key": "4232102_root",
                "path_num": -1
            },
            {
                "block_addr": "loopSeerDum",
                "constraints": [
                    [
                        1,
                        [
                            "<Bool Or(__eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac60), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac7c), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac64), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac78), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac68), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac74), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac6c), __eq__(__add__(__lshift__(SignExt(32, Extract(31, 0, ZeroExt(56, Extract(7, 0, LShR(ZeroExt(56, Extract(7, 0, reg_48_5591_64)), 0x5))))), 0x2), 0x40ac60), 0x40ac70))>",
                            "<BV32 Concat(0x0, If(__eq__(Extract(0, 0, LShR(Concat(0x0, If(__eq__(Extract(7, 5, reg_48_5591_64), 4), 0x0, If(__eq__(Extract(7, 5, reg_48_5591_64), 3), 0x7ffffffe, If(__eq__(Extract(7, 5, reg_48_5591_64), 5), 0x0, If(__eq__(Extract(7, 5, reg_48_5591_64), 2), 0xfffffffe, If(__eq__(Extract(7, 5, reg_48_5591_64), 6), 0x0, If(__eq__(Extract(7, 5, reg_48_5591_64), 1), 0xffffffef, If(__eq__(Extract(7, 5, reg_48_5591_64), 7), 0x0, If(__eq__(Extract(7, 5, reg_48_5591_64), 0), 0x1a00, 0xc0deb4be))))))))), Concat(0x0, Extract(4, 0, reg_48_5591_64)))), 0), 0, 1))>"
                        ]
                    ]
                ],
                "instructions": "no_instructions",
                "key": "loopSeerDum",
                "path_num": 0
            }
        ]
    },
    "func_name": "is_basic"
}